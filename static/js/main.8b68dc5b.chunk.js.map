{"version":3,"sources":["components/BrailleCell/BrailleCell.jsx","lib/uncontracted-braille-chars.js","components/BrailleCellPage/BrailleCellPage.jsx","components/BrailleDisplay/BrailleDisplay.jsx","lib/quotes.js","components/QuotesSelector/QuotesSelector.jsx","components/BrailleDisplayPreferences/BrailleDisplayPreferences.jsx","components/BrailleDisplaySimulator/BrailleDisplaySimulator.jsx","index.js"],"names":["BrailleCell","props","character","brailleCharacter","showCharacter","className","uncontractedBrailleChars","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","BrailleCellPage","words","split","map","idx","brailleCharacters","BrailleDisplay","numOfCells","sentence","useState","page","setPage","pages","text","cellsCount","start","push","substring","length","generatePages","disabled","onClick","type","defaultProps","quotes","author","quote","QuotesSelector","setSelectedText","allQuotes","sort","quoteA","quoteB","toUpperCase","id","getQuotes","setText","useEffect","defaultValue","onChange","evt","value","target","BrailleDisplayCellPreference","setNumOfActiveCells","setShowCharacter","showCharacterChecked","setShowCharacterChecked","parseInt","checked","htmlFor","BrailleDisplaySimulator","numOfActiveCells","selectedText","toLowerCase","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b68dc5b.chunk.js","sourcesContent":["import React from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\n\nconst BrailleCell = (props) => {\n  const { \n    character,\n    brailleCharacter,\n    showCharacter,\n  } = props;\n\n  return (\n    <div className=\"braille-cell\">\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacter[0] ? 'braille-dot--active' : ''}`} />\n        <span className={`braille-dot ${brailleCharacter[1] ? 'braille-dot--active' : ''}`} />\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacter[2] ? 'braille-dot--active' : ''}`} />\n        <span className={`braille-dot ${brailleCharacter[3] ? 'braille-dot--active' : ''}`} />\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacter[4] ? 'braille-dot--active' : ''}`} />\n        <span className={`braille-dot ${brailleCharacter[5] ? 'braille-dot--active' : ''}`} />\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacter[6] ? 'braille-dot--active' : ''}`} />\n        <span className={`braille-dot ${brailleCharacter[7] ? 'braille-dot--active' : ''}`} />\n      </div>\n      {showCharacter && (<div className=\"character-row\">{character}</div>)}\n    </div>\n  );\n};\n\nBrailleCell.propTypes = {\n  character: PropTypes.string.isRequired,\n  brailleCharacter: PropTypes.arrayOf(PropTypes.bool).isRequired,\n  showCharacter: PropTypes.bool.isRequired,\n};\n\nexport default BrailleCell;\n","const uncontractedBrailleChars = {\n  a: [true, false, false, false, false, false, false, false],\n  b: [true, false, true, false, false, false, false, false],\n  c: [true, true, false, false, false, false, false, false],\n  d: [true, true, false, true, false, false, false, false],\n  e: [true, false, false, true, false, false, false, false],\n  f: [true, true, true, false, false, false, false, false],\n  g: [true, true, true, true, false, false, false, false],\n  h: [true, false, true, true, false, false, false, false],\n  i: [false, true, true, false, false, false, false, false],\n  j: [false, true, true, true, false, false, false, false],\n  k: [true, false, false, false, true, false, false, false],\n  l: [true, false, true, false, true, false, false, false],\n  m: [true, true, false, false, true, false, false, false],\n  n: [true, true, false, true, true, false, false, false],\n  o: [true, false, false, true, true, false, false, false],\n  p: [true, true, true, false, true, false, false, false],\n  q: [true, true, true, true, true, false, false, false],\n  r: [true, false, true, true, true, false, false, false],\n  s: [false, true, true, false, true, false, false, false],\n  t: [false, true, true, true, true, false, false, false],\n  u: [true, false, false, false, true, true, false, false],\n  v: [true, false, true, false, true, true, false, false],\n  w: [false, true, true, true, false, true, false, false],\n  x: [true, true, false, false, true, true, false, false],\n  y: [true, true, false, true, true, true, false, false],\n  z: [true, false, false, true, true, true, false, false],\n  0: [false, true, true, true, false, false, false, false],\n  1: [true, false, false, false, false, false, false, false],\n  2: [true, false, true, false, false, false, false, false],\n  3: [true, true, false, false, false, false, false, false],\n  4: [true, true, false, true, false, false, false, false],\n  5: [true, false, false, true, false, false, false, false],\n  6: [true, true, true, false, false, false, false, false],\n  7: [true, true, true, true, false, false, false, false],\n  8: [true, false, true, true, false, false, false, false],\n  9: [false, true, true, false, false, false, false, false],\n  ' ': [false, false, false, false, false, false, false, false],\n  '.': [false, false,  true, true, false, true, false, false],\n  ',': [false, false, true, false, false, false, false, false],\n  '#': [false, true, false, true, true, true, false, false],\n  \"'\": [false, false, false, false, true, false, false, false],\n}\n\nexport default uncontractedBrailleChars;\n","import React from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\nimport BrailleCell from '../BrailleCell';\nimport brailleCharacters from '../../lib/uncontracted-braille-chars';\n\nconst BrailleCellPage = (props) => {\n  const {\n    showCharacter,\n    words\n  } = props;\n\n  return (\n    <div className=\"braille-cell-page\">\n      { words.split('').map((character, idx) => (\n        <BrailleCell\n          /* eslint-disable-next-line react/no-array-index-key */\n          key={idx}\n          character={character}\n          brailleCharacter={brailleCharacters[character]}\n          showCharacter={showCharacter}\n        />\n      ))}\n    </div>\n  );\n};\n\nBrailleCellPage.propTypes = {\n  showCharacter: PropTypes.bool.isRequired,\n  words: PropTypes.string.isRequired,\n}\n\nexport default BrailleCellPage;\n","import React, { useState } from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\nimport BrailleCellPage from '../BrailleCellPage';\n\nconst BrailleDisplay = (props) => {\n  const {\n    numOfCells,\n    sentence,\n    showCharacter,\n  } = props;\n\n  const [page, setPage] = useState(0);\n\n  const generatePages = (text, cellsCount) => {\n    const pages = [];\n    let start = 0;\n\n    do {\n      pages.push(text.substring(start, start + cellsCount));\n      start += numOfCells;\n    } while (start < text.length);\n\n    return pages;\n  };\n\n  const pages = generatePages(sentence, numOfCells);\n\n  return (\n    <div className={`braille-display braille-display--${numOfCells}`}>\n      <button\n        className=\"braille-display__nav braille-display__nav--prev-page\"\n        disabled={page === 0}\n        aria-label=\"Flip to previous page\"\n        onClick={() => setPage(page - 1)}\n        type=\"button\"\n      />\n      <BrailleCellPage\n        words={pages[page]} \n        showCharacter={showCharacter}\n      />\n      <button\n        className=\"braille-display__nav braille-display__nav--next-page\"\n        disabled={page === pages.length - 1}\n        aria-label=\"Flip to next page\"\n        onClick={() => setPage(page + 1)}\n        type=\"button\"\n      />\n    </div>\n  );\n};\n\nBrailleDisplay.propTypes = {\n  sentence: PropTypes.string.isRequired,\n  numOfCells: PropTypes.number,\n  showCharacter: PropTypes.bool.isRequired,\n};\n\nBrailleDisplay.defaultProps = {\n  numOfCells: 14,\n};\n\nexport default BrailleDisplay;\n","/**\n * Source: https://www.goodreads.com/quotes\n */\nconst quotes = [\n  {\n    author: 'Mahatma Gandhi',\n    quote: 'Be the change that you wish to see in the world.',\n  },\n  {\n    author: 'J.K. Rowling',\n    quote: \"If you want to know what a man's like, take a good look at how he treats his inferiors, not his equals.\",\n  },\n  {\n    author: 'Mark Twain',\n    quote: \"If you tell the truth, you don't have to remember anything.\",\n  },\n  {\n    author: 'Eleanor Roosevelt',\n    quote: \"No one can make you feel inferior without your consent.\",\n  },\n  {\n    author: 'Roy T. Bennett',\n    quote: \"Believe in your infinite potential. Your only limitations are those you set upon yourself.\",\n  }\n];\n\nexport default () => {\n  const allQuotes = [...quotes];\n  allQuotes.sort((quoteA, quoteB) => {\n    const a = quoteA.author.toUpperCase();\n    const b = quoteB.author.toUpperCase();\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n\n  return allQuotes.map(({ author, quote }, idx) => ({\n    id: `quote-${idx}`,\n    author,\n    quote,\n  }));\n};\n","/* eslint-disable jsx-a11y/no-onchange */\nimport React, { useState, useEffect } from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\nimport getQuotes from '../../lib/quotes';\n\nconst QuotesSelector = (props) => {\n  const {\n    setSelectedText\n  } = props;\n\n  const allQuotes = getQuotes();\n\n  const [text, setText] = useState(allQuotes[0].quote);\n\n  const onAuthorChosen = (evt) => {\n    const {\n      target: {\n        value\n      }\n    } = evt;\n    setText(value);\n  };\n\n  useEffect(() => {\n    setSelectedText(text);\n  }, [setSelectedText, text]);\n\n  return (\n    <section className=\"preference preference__quotes\">\n      <h3>Quotes By:</h3>\n      <select\n        aria-label=\"Select author of quote\"\n        defaultValue={allQuotes[0].quote}\n        onChange={onAuthorChosen}\n      >\n        {allQuotes.map(({ id, author, quote}) => (\n          <option key={id} value={quote}>{author}</option>\n        ))}\n      </select>\n    </section>\n  );\n};\n\nQuotesSelector.propTypes = {\n  setSelectedText: PropTypes.func.isRequired,\n};\n\nexport default QuotesSelector;\n","/* eslint-disable jsx-a11y/no-onchange */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useEffect } from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\nimport QuotesSelector from '../QuotesSelector';\n\nconst BrailleDisplayCellPreference = (props) => {\n  const {\n    setNumOfActiveCells,\n    setShowCharacter,\n    setSelectedText,\n  } = props;\n\n  const [showCharacterChecked, setShowCharacterChecked] = useState(false);\n\n  const updateNumOfCells = (evt) => {\n    const { target: { value } } = evt;\n    setNumOfActiveCells(parseInt(value, 10) || 14);\n  };\n\n  const onShowCharacterChecked = () => {\n    setShowCharacterChecked(!showCharacterChecked);\n  };\n\n  useEffect(() => {\n    setShowCharacter(showCharacterChecked);\n  }, [setShowCharacter, showCharacterChecked]);\n\n  return (\n    <section className=\"braille-display-preferences\">\n      <h2>Update your preferences:</h2>\n      <section className=\"preference preference__num-of-cells\">\n        <h3>Number of cells: </h3>\n        <select\n          aria-label=\"Select number of cells\"\n          defaultValue={14}\n          onChange={updateNumOfCells}\n        >\n          <option value=\"14\">14 cells</option>\n          <option value=\"20\">20 cells</option>\n          <option value=\"40\">40 cells</option>\n        </select>\n      </section>\n      <QuotesSelector\n        setSelectedText={setSelectedText}\n      />\n      <div className=\"preference preference__show-characters\">\n        <input\n          type=\"checkbox\"\n          id=\"showCharsCheckbox\"\n          checked={showCharacterChecked}\n          onChange={onShowCharacterChecked}\n        />\n        <label htmlFor=\"showCharsCheckbox\">Show characters</label>\n      </div>\n    </section>\n  );\n};\n\nBrailleDisplayCellPreference.propTypes = {\n  setNumOfActiveCells: PropTypes.func.isRequired,\n  setShowCharacter: PropTypes.func.isRequired,\n  setSelectedText: PropTypes.func.isRequired,\n};\n\nexport default BrailleDisplayCellPreference;\n","import React, { useState } from 'react';\nimport BrailleDisplay from '../BrailleDisplay';\nimport BrailleDisplayPreferences from '../BrailleDisplayPreferences';\n\nconst BrailleDisplaySimulator = () => {\n  const [numOfActiveCells, setNumOfActiveCells] = useState(14);\n  const [showCharacter, setShowCharacter] = useState(false);\n  const [selectedText, setSelectedText] = useState('');\n\n  return (\n    <div className=\"braille-display-simulator\">\n      <h1>Refreshable Braille Display Simulator</h1>\n      <BrailleDisplay \n        numOfCells={numOfActiveCells}\n        sentence={selectedText.toLowerCase()}\n        showCharacter={showCharacter}\n      />\n      <BrailleDisplayPreferences\n        setNumOfActiveCells={setNumOfActiveCells}\n        setShowCharacter={setShowCharacter}\n        setSelectedText={setSelectedText}\n      />\n    </div>\n  );\n}\n\nexport default BrailleDisplaySimulator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport BrailleDisplaySimulator from './components/BrailleDisplaySimulator';\nimport './index.css';\n\nReactDOM.render(<BrailleDisplaySimulator />, document.getElementById('root'));\n"],"sourceRoot":""}