{"version":3,"sources":["components/BrailleCell/BrailleCell.jsx","lib/uncontracted-braille-chars.js","components/BrailleCellPage/BrailleCellPage.jsx","components/BrailleDisplay/BrailleDisplay.jsx","components/BrailleDisplaySimulator/BrailleDisplaySimulator.jsx","index.js"],"names":["BrailleCell","props","brailleCharacters","className","uncontractedBrailleChars","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","BrailleCellPage","brailleChars","words","split","map","word","brailleChar","idx","key","BrailleDisplay","sentence","numOfCells","pages","_generatePages","state","page","this","setState","start","push","substring","length","prevProps","console","log","disabled","aria-label","onClick","_setPage","Component","defaultProps","BrailleDisplaySimulator","useState","numOfActiveCells","setNumOfActiveCells","selectRef","useRef","toLowerCase","ref","value","selected","type","cellsSelect","current","parseInt","ReactDOM","render","document","getElementById"],"mappings":"uXAiCeA,G,YA7BK,SAACC,GAAW,IACtBC,EAAsBD,EAAtBC,kBAER,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,eACb,0BAAMA,UAAS,sBAAiBD,EAAkB,GAAK,sBAAwB,MAC/E,0BAAMC,UAAS,sBAAiBD,EAAkB,GAAK,sBAAwB,OAEjF,yBAAKC,UAAU,eACb,0BAAMA,UAAS,sBAAiBD,EAAkB,GAAK,sBAAwB,MAC/E,0BAAMC,UAAS,sBAAiBD,EAAkB,GAAK,sBAAwB,OAEjF,yBAAKC,UAAU,eACb,0BAAMA,UAAS,sBAAiBD,EAAkB,GAAK,sBAAwB,MAC/E,0BAAMC,UAAS,sBAAiBD,EAAkB,GAAK,sBAAwB,OAEjF,yBAAKC,UAAU,eACb,0BAAMA,UAAS,sBAAiBD,EAAkB,GAAK,sBAAwB,MAC/E,0BAAMC,UAAS,sBAAiBD,EAAkB,GAAK,sBAAwB,UCoBxEE,EA3CkB,CAC/BC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACpDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAM,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAM,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAM,GAAM,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAM,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAO,GAAM,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAO,GAAO,GAChDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAM,GAAM,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAO,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAM,GAAM,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAM,GAAM,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAM,GAAO,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAM,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAM,GAAM,GAAM,GAAO,GAChDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAM,GAAM,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACpDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAM,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GACnD,IAAK,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACvD,IAAK,EAAC,GAAO,GAAQ,GAAM,GAAM,GAAO,GAAM,GAAO,GACrD,IAAK,EAAC,GAAO,GAAO,GAAM,GAAO,GAAO,GAAO,GAAO,GACtD,IAAK,EAAC,GAAO,GAAM,GAAO,GAAM,GAAM,GAAM,GAAO,IChBtCC,EAlBS,SAACxC,GAAW,IAE5ByC,EADYzC,EAAV0C,MACmBC,MAAM,IAC9BC,KAAI,SAAAC,GAAI,OAAI5C,EAAkB4C,MAEjC,OACE,yBAAK3C,UAAU,qBACXuC,EAAaG,KAAI,SAACE,EAAaC,GAAd,OACjB,kBAAC,EAAD,CAAaC,IAAKD,EAAK9C,kBAAmB6C,SCT5CG,G,kBACJ,WAAYjD,GAAQ,IAAD,sBACjB,4CAAMA,IADW,IAGTkD,EAAyBlD,EAAzBkD,SAAUC,EAAenD,EAAfmD,WAHD,OAKjB,EAAKC,MAAQ,EAAKC,eAAeH,EAAUC,GAE3C,EAAKG,MAAQ,CACXC,KAAM,GARS,E,sEAYVA,GACPC,KAAKC,SAAS,CAAEF,W,qCAGHL,EAAUC,GACvB,IAAMC,EAAQ,GACVM,EAAQ,EAEZ,GACEN,EAAMO,KAAKT,EAASU,UAAUF,EAAOA,EAAQP,IAC7CO,GAASP,QACFO,EAAQR,EAASW,QAE1B,OAAOT,I,yCAGUU,GACbA,EAAUX,aAAeK,KAAKxD,MAAMmD,aACtCK,KAAKJ,MAAQI,KAAKH,eAAeG,KAAKxD,MAAMkD,SAAUM,KAAKxD,MAAMmD,YACjEK,KAAKC,SAAS,CACZF,KAAM,O,+BAKF,IAAD,OACPQ,QAAQC,IAAI,aADL,IAECT,EAASC,KAAKF,MAAdC,KAGR,OAFAQ,QAAQC,IAAIT,EAAMC,KAAKJ,MAAMG,IAG3B,yBAAKrD,UAAS,2CAAsCsD,KAAKxD,MAAMmD,aAC7D,4BACEjD,UAAU,uDACV+D,SAAmB,IAATV,EACVW,aAAW,wBACXC,QAAS,kBAAM,EAAKC,SAASb,EAAO,MAGtC,kBAAC,EAAD,CAAiBb,MAAOc,KAAKJ,MAAMG,KACnC,4BACErD,UAAU,uDACV+D,SAAUV,IAASC,KAAKJ,MAAMS,OAAS,EACvCK,aAAW,oBACXC,QAAS,kBAAM,EAAKC,SAASb,EAAO,W,GAzDjBc,cAsE7BpB,EAAeqB,aAAe,CAC5BnB,WAAY,IAGCF,QCjCAsB,EA1CiB,WAAO,IAAD,EACYC,mBAAS,IADrB,mBAC7BC,EAD6B,KACXC,EADW,KAG9BC,EAAYC,mBAUlB,OACE,yBAAK1E,UAAU,6BACb,qEACA,kBAAC,EAAD,CACEiD,WAAYsB,EACZvB,SAPW,2UAOQ2B,gBAErB,6BAAS3E,UAAU,eACjB,wDACA,6BAASA,UAAU,uCACjB,iDACA,4BAAQ4E,IAAKH,GACX,4BAAQI,MAAM,KAAKC,UAAQ,GAA3B,YACA,4BAAQD,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,cAGJ,4BACE7E,UAAU,wBACV+E,KAAK,SACLd,QA5BY,WAClB,IAAMe,EAAcP,EAAUQ,QAC9BT,EAAoBU,SAASF,EAAYH,MAAO,KAChDhB,QAAQC,IAAIS,KAsBR,yBC7BRY,IAASC,OAAO,kBAAC,EAAD,MAA6BC,SAASC,eAAe,W","file":"static/js/main.a0fccee4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './BrailleCell.scss';\n\nconst BrailleCell = (props) => {\n  const { brailleCharacters } = props;\n\n  return (\n    <div className=\"braille-cell\">\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacters[0] ? 'braille-dot--active' : ''}`}></span>\n        <span className={`braille-dot ${brailleCharacters[1] ? 'braille-dot--active' : ''}`}></span>\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacters[2] ? 'braille-dot--active' : ''}`}></span>\n        <span className={`braille-dot ${brailleCharacters[3] ? 'braille-dot--active' : ''}`}></span>\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacters[4] ? 'braille-dot--active' : ''}`}></span>\n        <span className={`braille-dot ${brailleCharacters[5] ? 'braille-dot--active' : ''}`}></span>\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacters[6] ? 'braille-dot--active' : ''}`}></span>\n        <span className={`braille-dot ${brailleCharacters[7] ? 'braille-dot--active' : ''}`}></span>\n      </div>\n    </div>\n  );\n}\n\nBrailleCell.propTypes = {\n  brailleCharacters: PropTypes.arrayOf(PropTypes.bool).isRequired,\n};\n\nexport default BrailleCell;\n","const uncontractedBrailleChars = {\n  a: [true, false, false, false, false, false, false, false],\n  b: [true, false, true, false, false, false, false, false],\n  c: [true, true, false, false, false, false, false, false],\n  d: [true, true, false, true, false, false, false, false],\n  e: [true, false, false, true, false, false, false, false],\n  f: [true, true, true, false, false, false, false, false],\n  g: [true, true, true, true, false, false, false, false],\n  h: [true, false, true, true, false, false, false, false],\n  i: [false, true, true, false, false, false, false, false],\n  j: [false, true, true, true, false, false, false, false],\n  k: [true, false, false, false, true, false, false, false],\n  l: [true, false, true, false, true, false, false, false],\n  m: [true, true, false, false, true, false, false, false],\n  n: [true, true, false, true, true, false, false, false],\n  o: [true, false, false, true, true, false, false, false],\n  p: [true, true, true, false, true, false, false, false],\n  q: [true, true, true, true, true, false, false, false],\n  r: [true, false, true, true, true, false, false, false],\n  s: [false, true, true, false, true, false, false, false],\n  t: [false, true, true, true, true, false, false, false],\n  u: [true, false, false, false, true, true, false, false],\n  v: [true, false, true, false, true, true, false, false],\n  w: [false, true, true, true, false, true, false, false],\n  x: [true, true, false, false, true, true, false, false],\n  y: [true, true, false, true, true, true, false, false],\n  z: [true, false, false, true, true, true, false, false],\n  0: [false, true, true, true, false, false, false, false],\n  1: [true, false, false, false, false, false, false, false],\n  2: [true, false, true, false, false, false, false, false],\n  3: [true, true, false, false, false, false, false, false],\n  4: [true, true, false, true, false, false, false, false],\n  5: [true, false, false, true, false, false, false, false],\n  6: [true, true, true, false, false, false, false, false],\n  7: [true, true, true, true, false, false, false, false],\n  8: [true, false, true, true, false, false, false, false],\n  9: [false, true, true, false, false, false, false, false],\n  ' ': [false, false, false, false, false, false, false, false],\n  '.': [false, false,  true, true, false, true, false, false],\n  ',': [false, false, true, false, false, false, false, false],\n  '#': [false, true, false, true, true, true, false, false],\n}\n\nexport default uncontractedBrailleChars;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './BrailleCellPage.scss';\nimport BrailleCell from '../BrailleCell';\nimport brailleCharacters from '../../lib/uncontracted-braille-chars';\n\nconst BrailleCellPage = (props) => {\n  const { words } = props;\n  const brailleChars = words.split('')\n    .map(word => brailleCharacters[word]);\n\n  return (\n    <div className=\"braille-cell-page\">\n      { brailleChars.map((brailleChar, idx) => (\n        <BrailleCell key={idx} brailleCharacters={brailleChar} />\n      ))}\n    </div>\n  );\n}\n\nBrailleCellPage.propTypes = {\n  words: PropTypes.string.isRequired,\n}\n\nexport default BrailleCellPage;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport BrailleCellPage from '../BrailleCellPage';\nimport './BrailleDisplay.scss';\n\nclass BrailleDisplay extends Component {\n  constructor(props) {\n    super(props);\n\n    const { sentence, numOfCells } = props;\n\n    this.pages = this._generatePages(sentence, numOfCells);\n\n    this.state = {\n      page: 0,\n    }\n  }\n\n  _setPage(page) {\n    this.setState({ page });\n  }\n\n  _generatePages(sentence, numOfCells) {\n    const pages = [];\n    let start = 0;\n\n    do {\n      pages.push(sentence.substring(start, start + numOfCells));\n      start += numOfCells;\n    } while (start < sentence.length);\n\n    return pages;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.numOfCells !== this.props.numOfCells) {\n      this.pages = this._generatePages(this.props.sentence, this.props.numOfCells);\n      this.setState({\n        page: 0,\n      })\n    }\n  }\n\n  render() {\n    console.log('RENDERING');\n    const { page } = this.state;\n    console.log(page, this.pages[page]);\n\n    return (\n      <div className={`braille-display braille-display--${this.props.numOfCells}`}>\n        <button\n          className=\"braille-display__nav braille-display__nav--prev-page\"\n          disabled={page === 0}\n          aria-label=\"Flip to previous page\"\n          onClick={() => this._setPage(page - 1)}\n        >\n        </button>\n        <BrailleCellPage words={this.pages[page]} />\n        <button\n          className=\"braille-display__nav braille-display__nav--next-page\"\n          disabled={page === this.pages.length - 1}\n          aria-label=\"Flip to next page\"\n          onClick={() => this._setPage(page + 1)}\n        >\n        </button>\n      </div>\n    );\n  }\n}\n\nBrailleDisplay.propTypes = {\n  sentence: PropTypes.string.isRequired,\n  numOfCells: PropTypes.number,\n};\n\nBrailleDisplay.defaultProps = {\n  numOfCells: 14,\n};\n\nexport default BrailleDisplay;\n","import React, { useState, useRef } from 'react';\nimport './BrailleDisplaySimulator.scss';\nimport BrailleDisplay from '../BrailleDisplay';\n\nconst BrailleDisplaySimulator = () => {\n  const [numOfActiveCells, setNumOfActiveCells] = useState(14);\n\n  const selectRef = useRef();\n\n  const updatePrefs = () => {\n    const cellsSelect = selectRef.current;\n    setNumOfActiveCells(parseInt(cellsSelect.value, 10));\n    console.log(numOfActiveCells);\n  }\n\n  const sentence = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Aliquam etiam erat velit scelerisque. Aliquet risus feugiat in ante metus dictum at. Bibendum arcu vitae elementum curabitur. Nulla posuere sollicitudin aliquam ultrices sagittis orci a scelerisque purus.';\n\n  return (\n    <div className=\"braille-display-simulator\">\n      <h1>Refreshable Braille Display Simulator</h1>\n      <BrailleDisplay \n        numOfCells={numOfActiveCells}\n        sentence={sentence.toLowerCase()} \n      />\n      <section className=\"preferences\">\n        <h2>Update your preferences:</h2>\n        <section className=\"preference preference__num-of-cells\">\n          <h3>Number of cells: </h3>\n          <select ref={selectRef}>\n            <option value=\"14\" selected>14 cells</option>\n            <option value=\"20\">20 cells</option>\n            <option value=\"40\">40 cells</option>\n          </select>\n        </section>\n        <button \n          className=\"preferences__save-btn\"\n          type=\"button\"\n          onClick={updatePrefs}\n        >\n          Update Preferences\n        </button>\n      </section>\n    </div>\n  );\n}\n\nexport default BrailleDisplaySimulator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BrailleDisplaySimulator from './components/BrailleDisplaySimulator';\n\nReactDOM.render(<BrailleDisplaySimulator />, document.getElementById('root'));\n"],"sourceRoot":""}