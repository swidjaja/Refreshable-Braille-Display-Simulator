{"version":3,"sources":["components/BrailleCell/BrailleCell.jsx","lib/uncontracted-braille-chars.js","components/BrailleCellPage/BrailleCellPage.jsx","components/BrailleDisplay/BrailleDisplay.jsx","components/BrailleDisplayPreferences/BrailleDisplayPreferences.jsx","components/BrailleDisplaySimulator/BrailleDisplaySimulator.jsx","index.js"],"names":["BrailleCell","props","character","brailleCharacter","showCharacter","className","uncontractedBrailleChars","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","BrailleCellPage","words","split","map","idx","key","brailleCharacters","BrailleDisplay","numOfCells","sentence","useState","page","setPage","pages","start","push","substring","length","generatePages","disabled","aria-label","onClick","defaultProps","BrailleDisplayCellPreference","setNumOfActiveCells","setShowCharacter","showCharacterChecked","setShowCharacterChecked","useEffect","onChange","evt","value","target","selected","type","id","checked","htmlFor","BrailleDisplaySimulator","numOfActiveCells","toLowerCase","ReactDOM","render","document","getElementById"],"mappings":"wVAuCeA,G,kBApCK,SAACC,GAAW,IAE5BC,EAGED,EAHFC,UACAC,EAEEF,EAFFE,iBACAC,EACEH,EADFG,cAGF,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,eACb,0BAAMA,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,MAC9E,0BAAME,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,OAEhF,yBAAKE,UAAU,eACb,0BAAMA,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,MAC9E,0BAAME,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,OAEhF,yBAAKE,UAAU,eACb,0BAAMA,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,MAC9E,0BAAME,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,OAEhF,yBAAKE,UAAU,eACb,0BAAMA,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,MAC9E,0BAAME,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,OAE/EC,GAAkB,yBAAKC,UAAU,iBAAiBH,MCe1CI,EA3CkB,CAC/BC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACpDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAM,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAM,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAM,GAAM,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAM,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAO,GAAM,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAO,GAAO,GAChDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAM,GAAM,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAO,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAM,GAAM,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAM,GAAM,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAM,GAAO,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAM,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAM,GAAM,GAAM,GAAO,GAChDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAM,GAAM,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACpDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAM,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GACnD,IAAK,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACvD,IAAK,EAAC,GAAO,GAAQ,GAAM,GAAM,GAAO,GAAM,GAAO,GACrD,IAAK,EAAC,GAAO,GAAO,GAAM,GAAO,GAAO,GAAO,GAAO,GACtD,IAAK,EAAC,GAAO,GAAM,GAAO,GAAM,GAAM,GAAM,GAAO,ICVtCC,EAzBS,SAAC1C,GAAW,IAEhCG,EAEEH,EAFFG,cACAwC,EACE3C,EADF2C,MAGF,OACE,yBAAKvC,UAAU,qBACXuC,EAAMC,MAAM,IAAIC,KAAI,SAAC5C,EAAW6C,GAAZ,OACpB,kBAAC,EAAD,CACEC,IAAKD,EACL7C,UAAWA,EACXC,iBAAkB8C,EAAkB/C,GACpCE,cAAeA,SCdnB8C,EAAiB,SAACjD,GAAW,IAE/BkD,EAGElD,EAHFkD,WACAC,EAEEnD,EAFFmD,SACAhD,EACEH,EADFG,cAJ8B,EAORiD,mBAAS,GAPD,mBAOzBC,EAPyB,KAOnBC,EAPmB,KAqB1BC,EAZgB,SAACJ,EAAUD,GAC/B,IAAMK,EAAQ,GACVC,EAAQ,EAEZ,GACED,EAAME,KAAKN,EAASO,UAAUF,EAAOA,EAAQN,IAC7CM,GAASN,QACFM,EAAQL,EAASQ,QAE1B,OAAOJ,EAGKK,CAAcT,EAAUD,GAEtC,OACE,yBAAK9C,UAAS,2CAAsC8C,IAClD,4BACE9C,UAAU,uDACVyD,SAAmB,IAATR,EACVS,aAAW,wBACXC,QAAS,kBAAMT,EAAQD,EAAO,MAGhC,kBAAC,EAAD,CACEV,MAAOY,EAAMF,GACblD,cAAeA,IAEjB,4BACEC,UAAU,uDACVyD,SAAUR,IAASE,EAAMI,OAAS,EAClCG,aAAW,oBACXC,QAAS,kBAAMT,EAAQD,EAAO,QAatCJ,EAAee,aAAe,CAC5Bd,WAAY,IAGCD,QCTAgB,G,MAjDsB,SAACjE,GAAW,IAE7CkE,EAEElE,EAFFkE,oBACAC,EACEnE,EADFmE,iBAH4C,EAMUf,oBAAS,GANnB,mBAMvCgB,EANuC,KAMjBC,EANiB,KAqB9C,OAJAC,qBAAU,WACRH,EAAiBC,KAChB,CAACD,EAAkBC,IAGpB,6BAAShE,UAAU,+BACjB,wDACA,6BAASA,UAAU,uCACjB,iDACA,4BAAQ0D,aAAW,yBAAyBS,SAlBzB,SAACC,GACxB,IAAMC,EAAQD,EAAIE,OAAOD,MACzBP,EAAoBO,KAiBd,4BAAQA,MAAM,KAAKE,UAAQ,GAA3B,YACA,4BAAQF,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,cAGJ,yBAAKrE,UAAU,0CACb,2BACEwE,KAAK,WACLC,GAAG,oBACHC,QAASV,EACTG,SAxBuB,WAC7BF,GAAyBD,MAyBrB,2BAAOW,QAAQ,qBAAf,uBChBOC,EAtBiB,WAAO,IAAD,EACY5B,mBAAS,IADrB,mBAC7B6B,EAD6B,KACXf,EADW,OAEMd,oBAAS,GAFf,mBAE7BjD,EAF6B,KAEdgE,EAFc,KAMpC,OACE,yBAAK/D,UAAU,6BACb,qEACA,kBAAC,EAAD,CACE8C,WAAY+B,EACZ9B,SAPW,2UAOQ+B,cACnB/E,cAAeA,IAEjB,kBAAC,EAAD,CACE+D,oBAAqBA,EACrBC,iBAAkBA,M,MCf1BgB,IAASC,OAAO,kBAAC,EAAD,MAA6BC,SAASC,eAAe,W","file":"static/js/main.0c6b3aad.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BrailleCell = (props) => {\n  const { \n    character,\n    brailleCharacter,\n    showCharacter,\n  } = props;\n\n  return (\n    <div className=\"braille-cell\">\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacter[0] ? 'braille-dot--active' : ''}`}></span>\n        <span className={`braille-dot ${brailleCharacter[1] ? 'braille-dot--active' : ''}`}></span>\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacter[2] ? 'braille-dot--active' : ''}`}></span>\n        <span className={`braille-dot ${brailleCharacter[3] ? 'braille-dot--active' : ''}`}></span>\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacter[4] ? 'braille-dot--active' : ''}`}></span>\n        <span className={`braille-dot ${brailleCharacter[5] ? 'braille-dot--active' : ''}`}></span>\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacter[6] ? 'braille-dot--active' : ''}`}></span>\n        <span className={`braille-dot ${brailleCharacter[7] ? 'braille-dot--active' : ''}`}></span>\n      </div>\n      {showCharacter && (<div className=\"character-row\">{character}</div>)}\n    </div>\n  );\n};\n\nBrailleCell.propTypes = {\n  character: PropTypes.string.isRequired,\n  brailleCharacter: PropTypes.arrayOf(PropTypes.bool).isRequired,\n  showCharacter: PropTypes.bool.isRequired,\n};\n\nexport default BrailleCell;\n","const uncontractedBrailleChars = {\n  a: [true, false, false, false, false, false, false, false],\n  b: [true, false, true, false, false, false, false, false],\n  c: [true, true, false, false, false, false, false, false],\n  d: [true, true, false, true, false, false, false, false],\n  e: [true, false, false, true, false, false, false, false],\n  f: [true, true, true, false, false, false, false, false],\n  g: [true, true, true, true, false, false, false, false],\n  h: [true, false, true, true, false, false, false, false],\n  i: [false, true, true, false, false, false, false, false],\n  j: [false, true, true, true, false, false, false, false],\n  k: [true, false, false, false, true, false, false, false],\n  l: [true, false, true, false, true, false, false, false],\n  m: [true, true, false, false, true, false, false, false],\n  n: [true, true, false, true, true, false, false, false],\n  o: [true, false, false, true, true, false, false, false],\n  p: [true, true, true, false, true, false, false, false],\n  q: [true, true, true, true, true, false, false, false],\n  r: [true, false, true, true, true, false, false, false],\n  s: [false, true, true, false, true, false, false, false],\n  t: [false, true, true, true, true, false, false, false],\n  u: [true, false, false, false, true, true, false, false],\n  v: [true, false, true, false, true, true, false, false],\n  w: [false, true, true, true, false, true, false, false],\n  x: [true, true, false, false, true, true, false, false],\n  y: [true, true, false, true, true, true, false, false],\n  z: [true, false, false, true, true, true, false, false],\n  0: [false, true, true, true, false, false, false, false],\n  1: [true, false, false, false, false, false, false, false],\n  2: [true, false, true, false, false, false, false, false],\n  3: [true, true, false, false, false, false, false, false],\n  4: [true, true, false, true, false, false, false, false],\n  5: [true, false, false, true, false, false, false, false],\n  6: [true, true, true, false, false, false, false, false],\n  7: [true, true, true, true, false, false, false, false],\n  8: [true, false, true, true, false, false, false, false],\n  9: [false, true, true, false, false, false, false, false],\n  ' ': [false, false, false, false, false, false, false, false],\n  '.': [false, false,  true, true, false, true, false, false],\n  ',': [false, false, true, false, false, false, false, false],\n  '#': [false, true, false, true, true, true, false, false],\n}\n\nexport default uncontractedBrailleChars;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BrailleCell from '../BrailleCell';\nimport brailleCharacters from '../../lib/uncontracted-braille-chars';\n\nconst BrailleCellPage = (props) => {\n  const {\n    showCharacter,\n    words\n  } = props;\n\n  return (\n    <div className=\"braille-cell-page\">\n      { words.split('').map((character, idx) => (\n        <BrailleCell\n          key={idx}\n          character={character}\n          brailleCharacter={brailleCharacters[character]}\n          showCharacter={showCharacter}\n        />\n      ))}\n    </div>\n  );\n};\n\nBrailleCellPage.propTypes = {\n  showCharacter: PropTypes.bool.isRequired,\n  words: PropTypes.string.isRequired,\n}\n\nexport default BrailleCellPage;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport BrailleCellPage from '../BrailleCellPage';\n\nconst BrailleDisplay = (props) => {\n  const {\n    numOfCells,\n    sentence,\n    showCharacter,\n  } = props;\n\n  const [page, setPage] = useState(0);\n\n  const generatePages = (sentence, numOfCells) => {\n    const pages = [];\n    let start = 0;\n\n    do {\n      pages.push(sentence.substring(start, start + numOfCells));\n      start += numOfCells;\n    } while (start < sentence.length);\n\n    return pages;\n  };\n\n  const pages = generatePages(sentence, numOfCells);\n\n  return (\n    <div className={`braille-display braille-display--${numOfCells}`}>\n      <button\n        className=\"braille-display__nav braille-display__nav--prev-page\"\n        disabled={page === 0}\n        aria-label=\"Flip to previous page\"\n        onClick={() => setPage(page - 1)}\n      >\n      </button>\n      <BrailleCellPage\n        words={pages[page]} \n        showCharacter={showCharacter}\n      />\n      <button\n        className=\"braille-display__nav braille-display__nav--next-page\"\n        disabled={page === pages.length - 1}\n        aria-label=\"Flip to next page\"\n        onClick={() => setPage(page + 1)}\n      >\n      </button>\n    </div>\n  );\n};\n\nBrailleDisplay.propTypes = {\n  sentence: PropTypes.string.isRequired,\n  numOfCells: PropTypes.number,\n  showCharacter: PropTypes.bool.isRequired,\n};\n\nBrailleDisplay.defaultProps = {\n  numOfCells: 14,\n};\n\nexport default BrailleDisplay;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst BrailleDisplayCellPreference = (props) => {\n  const {\n    setNumOfActiveCells,\n    setShowCharacter,\n  } = props;\n\n  const [showCharacterChecked, setShowCharacterChecked] = useState(false);\n\n  const updateNumOfCells = (evt) => {\n    const value = evt.target.value;\n    setNumOfActiveCells(value);\n  };\n\n  const onShowCharacterChecked = () => {\n    setShowCharacterChecked(!showCharacterChecked);\n  };\n\n  useEffect(() => {\n    setShowCharacter(showCharacterChecked);\n  }, [setShowCharacter, showCharacterChecked]);\n\n  return (\n    <section className=\"braille-display-preferences\">\n      <h2>Update your preferences:</h2>\n      <section className=\"preference preference__num-of-cells\">\n        <h3>Number of cells: </h3>\n        <select aria-label=\"Select number of cells\" onChange={updateNumOfCells}>\n          <option value=\"14\" selected>14 cells</option>\n          <option value=\"20\">20 cells</option>\n          <option value=\"40\">40 cells</option>\n        </select>\n      </section>\n      <div className=\"preference preference__show-characters\">\n        <input\n          type=\"checkbox\"\n          id=\"showCharsCheckbox\"\n          checked={showCharacterChecked}\n          onChange={onShowCharacterChecked}\n        />\n        <label htmlFor=\"showCharsCheckbox\">Show characters</label>\n      </div>\n    </section>\n  );\n};\n\nBrailleDisplayCellPreference.propTypes = {\n  setNumOfActiveCells: PropTypes.func,\n};\n\nexport default BrailleDisplayCellPreference;\n","import React, { useState } from 'react';\nimport BrailleDisplay from '../BrailleDisplay';\nimport BrailleDisplayPreferences from '../BrailleDisplayPreferences';\n\nconst BrailleDisplaySimulator = () => {\n  const [numOfActiveCells, setNumOfActiveCells] = useState(14);\n  const [showCharacter, setShowCharacter] = useState(false);\n\n  const sentence = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Aliquam etiam erat velit scelerisque. Aliquet risus feugiat in ante metus dictum at. Bibendum arcu vitae elementum curabitur. Nulla posuere sollicitudin aliquam ultrices sagittis orci a scelerisque purus.';\n\n  return (\n    <div className=\"braille-display-simulator\">\n      <h1>Refreshable Braille Display Simulator</h1>\n      <BrailleDisplay \n        numOfCells={numOfActiveCells}\n        sentence={sentence.toLowerCase()}\n        showCharacter={showCharacter}\n      />\n      <BrailleDisplayPreferences\n        setNumOfActiveCells={setNumOfActiveCells}\n        setShowCharacter={setShowCharacter}\n      />\n    </div>\n  );\n}\n\nexport default BrailleDisplaySimulator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport BrailleDisplaySimulator from './components/BrailleDisplaySimulator';\nimport './index.css';\n\nReactDOM.render(<BrailleDisplaySimulator />, document.getElementById('root'));\n"],"sourceRoot":""}