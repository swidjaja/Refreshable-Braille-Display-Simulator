{"version":3,"sources":["components/BrailleCell/BrailleCell.jsx","lib/uncontracted-braille-chars.js","components/BrailleCharactersCheatSheet/BrailleCharactersCheatSheet.jsx","components/BrailleCellPage/BrailleCellPage.jsx","components/BrailleDisplay/BrailleDisplay.jsx","lib/quotes.js","components/QuotesSelector/QuotesSelector.jsx","components/BrailleDisplayPreferences/BrailleDisplayPreferences.jsx","components/BrailleDisplaySimulator/BrailleDisplaySimulator.jsx","index.js"],"names":["BrailleCell","props","character","brailleCharacter","showCharacter","size","className","defaultProps","emptyCell","uncontractedBrailleChars","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","BrailleCharacters","sortedBrailleCharacters","Object","keys","brailleCharacters","sort","map","idx","BrailleCellPage","numOfCells","characters","words","split","cells","length","BrailleDisplay","sentence","useState","page","setPage","pages","text","cellsCount","start","push","substring","generatePages","disabled","onClick","type","quotes","author","quote","QuotesSelector","setSelectedText","allQuotes","quoteA","quoteB","toUpperCase","id","getQuotes","setText","useEffect","defaultValue","onChange","evt","value","target","BrailleDisplayCellPreference","setNumOfActiveCells","setShowCharacter","showBrailleCheatsheet","setShowBrailleCheatsheet","showCharacterChecked","setShowCharacterChecked","showBrailleCheatSheetChecked","setShowBrailleCheatSheetChecked","parseInt","checked","htmlFor","BrailleDisplaySimulator","numOfActiveCells","selectedText","toLowerCase","ReactDOM","render","document","getElementById"],"mappings":"yWAIMA,EAAc,SAACC,GACnB,IACEC,EAIED,EAJFC,UACAC,EAGEF,EAHFE,iBACAC,EAEEH,EAFFG,cACAC,EACEJ,EADFI,KAGF,OACE,sBAAKC,UAAU,eAAf,UACE,sBAAKA,UAAU,cAAf,UACE,sBAAMA,UAAS,mCAA8BD,EAA9B,YAAsCF,EAAiB,GAAK,sBAAwB,MACnG,sBAAMG,UAAS,mCAA8BD,EAA9B,YAAsCF,EAAiB,GAAK,sBAAwB,SAErG,sBAAKG,UAAU,cAAf,UACE,sBAAMA,UAAS,mCAA8BD,EAA9B,YAAsCF,EAAiB,GAAK,sBAAwB,MACnG,sBAAMG,UAAS,mCAA8BD,EAA9B,YAAsCF,EAAiB,GAAK,sBAAwB,SAErG,sBAAKG,UAAU,cAAf,UACE,sBAAMA,UAAS,mCAA8BD,EAA9B,YAAsCF,EAAiB,GAAK,sBAAwB,MACnG,sBAAMG,UAAS,mCAA8BD,EAA9B,YAAsCF,EAAiB,GAAK,sBAAwB,SAErG,sBAAKG,UAAU,cAAf,UACE,sBAAMA,UAAS,mCAA8BD,EAA9B,YAAsCF,EAAiB,GAAK,sBAAwB,MACnG,sBAAMG,UAAS,mCAA8BD,EAA9B,YAAsCF,EAAiB,GAAK,sBAAwB,SAEpGC,GAAkB,qBAAKE,UAAU,gBAAf,SAAgCJ,MAGxD,EAEDF,EAAYO,aAAe,CACzBF,KAAM,SAUOL,QCUFQ,EAAY,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAE5DC,EA7CkB,CAC/BC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACpDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAM,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAM,GAAM,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAO,GAAM,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAM,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAO,GAAM,GAAO,GAClDC,EAAG,EAAC,GAAO,GAAM,GAAO,GAAO,GAAM,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAO,GAAM,GAAO,GAAO,GAAM,GAAM,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAO,GAAM,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAO,GAAM,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAO,GAAM,GAAM,GAAO,GAChDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAO,GAAO,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAO,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAO,GAAM,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAO,GAAO,GAAM,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAAM,GACjDC,EAAG,EAAC,GAAO,GAAM,GAAO,GAAO,GAAM,GAAM,GAAM,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAM,GAChDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAO,GAAM,GAAM,GACjD,EAAG,EAAC,GAAO,GAAM,GAAO,GAAO,GAAM,GAAM,GAAO,GAClD,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACpD,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GACnD,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAM,GAAO,GAAO,GACnD,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAM,GAAM,GAAO,GAClD,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAO,GAAM,GAAO,GACnD,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAM,GAAO,GAAO,GAClD,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAM,GAAM,GAAO,GACjD,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAO,GAAM,GAAO,GAClD,EAAG,EAAC,GAAO,GAAM,GAAO,GAAO,GAAM,GAAO,GAAO,GACnD,IAAK,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACvD,IAAK,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAM,GAAM,GACrD,IAAK,EAAC,GAAO,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GACtD,IAAK,EAAC,GAAO,GAAO,GAAM,GAAO,GAAO,GAAO,GAAO,IC7BzCC,EAnBW,WACxB,IAAMC,EAA0BC,OAAOC,KAAKC,GACzCC,MAAK,SAAC/B,EAAGC,GAAJ,OAAUD,EAAIC,CAAd,IACR,OACE,qBAAKL,UAAU,gCAAf,SACI+B,EAAwBK,KAAI,SAACvC,EAAkBwC,GAAnB,OAC5B,cAAC,EAAD,CAGEzC,UAAWC,EACXA,iBAAkBqC,EAAkBrC,GACpCC,eAAa,EACbC,KAAK,SANP,kCAEkCsC,GAHN,KAYnC,ECuBcC,G,YAvCS,SAAC3C,GAUvB,IATA,IACE4C,EAGE5C,EAHF4C,WACAzC,EAEEH,EAFFG,cAII0C,EAFF7C,EADF8C,MAGuBC,MAAM,IACzBC,EAAQ,GAEL/B,EAAI,EAAGA,EAAI4B,EAAWI,OAAQhC,GAAK,EAC1C+B,EAAM/B,GAAK4B,EAAW5B,GAGxB,IAAK,IAAIA,EAAI4B,EAAWI,OAAQhC,EAAI2B,EAAY3B,GAAK,EACnD+B,EAAM/B,GAAK,KAGb,OACE,qBAAKZ,UAAU,oBAAf,SACI2C,EAAMP,KAAI,SAACxC,EAAWyC,GAAZ,OACV,cAAC,EAAD,CAGEzC,UAAWA,EACXC,iBAAkBD,EAAYsC,EAAkBtC,GAAaM,EAC7DJ,cAAeA,GALjB,uBAEuBuC,GAHb,KAWjB,GChCKQ,EAAiB,SAAClD,GACtB,IACE4C,EAGE5C,EAHF4C,WACAO,EAEEnD,EAFFmD,SACAhD,EACEH,EADFG,cAGF,EAAwBiD,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAcMC,EAZgB,SAACC,EAAMC,GAC3B,IAAMF,EAAQ,GACVG,EAAQ,EAEZ,GACEH,EAAMI,KAAKH,EAAKI,UAAUF,EAAOA,EAAQD,IACzCC,GAASd,QACFc,EAAQF,EAAKP,QAEtB,OAAOM,CACR,CAEaM,CAAcV,EAAUP,GAEtC,OACE,sBAAKvC,UAAS,2CAAsCuC,GAApD,UACE,wBACEvC,UAAU,uDACVyD,SAAmB,IAATT,EACV,aAAW,wBACXU,QAAS,kBAAMT,EAAQD,EAAO,EAArB,EACTW,KAAK,WAEP,cAAC,EAAD,CACEpB,WAAYA,EACZE,MAAOS,EAAMF,GACblD,cAAeA,IAEjB,wBACEE,UAAU,uDACVyD,SAAUT,IAASE,EAAMN,OAAS,EAClC,aAAW,oBACXc,QAAS,kBAAMT,EAAQD,EAAO,EAArB,EACTW,KAAK,aAIZ,EAQDd,EAAe5C,aAAe,CAC5BsC,WAAY,IAGCM,QC5DTe,G,YAAS,CACb,CACEC,OAAQ,iBACRC,MAAO,oDAET,CACED,OAAQ,eACRC,MAAO,2GAET,CACED,OAAQ,aACRC,MAAO,+DAET,CACED,OAAQ,oBACRC,MAAO,2DAET,CACED,OAAQ,iBACRC,MAAO,gGC0BIC,EA1CQ,SAACpE,GACtB,IACEqE,EACErE,EADFqE,gBAGIC,EDeO,WACb,IAAMA,EAAS,UAAOL,GAatB,OAZAK,EAAU9B,MAAK,SAAC+B,EAAQC,GACtB,IAAM/D,EAAI8D,EAAOL,OAAOO,cAClB/D,EAAI8D,EAAON,OAAOO,cACxB,OAAIhE,EAAIC,EACC,EAELD,EAAIC,GACE,EAEH,CACR,IAEM4D,EAAU7B,KAAI,WAAoBC,GAApB,IAAGwB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAX,MAA6B,CAChDO,GAAG,SAAD,OAAWhC,GACbwB,SACAC,QAHmB,GAdvB,CCfoBQ,GAElB,EAAwBvB,mBAASkB,EAAU,GAAGH,OAA9C,mBAAOX,EAAP,KAAaoB,EAAb,KAeA,OAJAC,qBAAU,WACRR,EAAgBb,EACjB,GAAE,CAACa,EAAiBb,IAGnB,0BAASnD,UAAU,gCAAnB,UACE,+CACA,wBACE,aAAW,yBACXyE,aAAcR,EAAU,GAAGH,MAC3BY,SAnBiB,SAACC,GACtB,IAEIC,EAEAD,EAHFE,OACED,MAGJL,EAAQK,EACT,EASG,SAKGX,EAAU7B,KAAI,gBAAGiC,EAAH,EAAGA,GAAIR,EAAP,EAAOA,OAAQC,EAAf,EAAeA,MAAf,OACb,wBAAiBc,MAAOd,EAAxB,SAAgCD,GAAnBQ,EADA,QAMtB,ECgDcS,EAnFsB,SAACnF,GACpC,IACEoF,EAMEpF,EANFoF,oBACAC,EAKErF,EALFqF,iBACAlF,EAIEH,EAJFG,cACAkE,EAGErE,EAHFqE,gBACAiB,EAEEtF,EAFFsF,sBACAC,EACEvF,EADFuF,yBAGF,EAAwDnC,mBAASjD,GAAjE,mBAAOqF,EAAP,KAA6BC,EAA7B,KACA,EAAwErC,mBAASkC,GAAjF,mBAAOI,EAAP,KAAqCC,EAArC,KAuBA,OARAd,qBAAU,WACRQ,EAAiBG,EAClB,GAAE,CAACH,EAAkBG,IAEtBX,qBAAU,WACRU,EAAyBG,EAC1B,GAAE,CAACH,EAA0BG,IAG5B,0BAASrF,UAAU,8BAAnB,UACE,0DACA,0BAASA,UAAU,sCAAnB,UACE,qDACA,yBACE,aAAW,yBACXyE,aAAc,GACdC,SA7BiB,SAACC,GACxB,IAAkBC,EAAYD,EAAtBE,OAAUD,MAClBG,EAAoBQ,SAASX,EAAO,KAAO,GAC5C,EAuBK,UAKE,wBAAQA,MAAM,KAAd,sBACA,wBAAQA,MAAM,KAAd,sBACA,wBAAQA,MAAM,KAAd,4BAGJ,cAAC,EAAD,CACEZ,gBAAiBA,IAEnB,sBAAKhE,UAAU,yCAAf,UACE,uBACE2D,KAAK,WACLU,GAAG,oBACHmB,QAASL,EACTT,SAvCuB,WAC7BU,GAAyBD,EAC1B,IAuCK,uBAAOM,QAAQ,oBAAf,gCAEF,sBAAKzF,UAAU,yCAAf,UACE,uBACE2D,KAAK,WACLU,GAAG,yBACHmB,QAASH,EACTX,SA5CiC,WACvCY,GAAiCD,EAClC,IA4CK,uBAAOI,QAAQ,yBAAf,0CAIP,EC7CcC,EA7BiB,WAC9B,MAAgD3C,mBAAS,IAAzD,mBAAO4C,EAAP,KAAyBZ,EAAzB,KACA,EAA0ChC,oBAAS,GAAnD,mBAAOjD,EAAP,KAAsBkF,EAAtB,KACA,EAAwCjC,mBAAS,IAAjD,mBAAO6C,EAAP,KAAqB5B,EAArB,KACA,EAA0DjB,oBAAS,GAAnE,mBAAOkC,EAAP,KAA8BC,EAA9B,KAEA,OACE,sBAAKlF,UAAU,4BAAf,UACE,uEACA,cAAC,EAAD,CACEuC,WAAYoD,EACZ7C,SAAU8C,EAAaC,cACvB/F,cAAeA,IAEjB,sBAAKE,UAAU,2CAAf,UACE,cAAC,EAAD,CACE+E,oBAAqBA,EACrBC,iBAAkBA,EAClBlF,cAAeA,EACfkE,gBAAiBA,EACjBiB,sBAAuBA,EACvBC,yBAA0BA,IAE3BD,GAAyB,cAAC,EAAD,SAIjC,E,MC3BDa,IAASC,OAAO,cAAC,EAAD,IAA6BC,SAASC,eAAe,Q","file":"static/js/main.974267c2.chunk.js","sourcesContent":["import React from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\n\nconst BrailleCell = (props) => {\n  const { \n    character,\n    brailleCharacter,\n    showCharacter,\n    size,\n  } = props;\n\n  return (\n    <div className=\"braille-cell\">\n      <div className=\"braille-row\">\n        <span className={`braille-dot braille-dot--${size} ${brailleCharacter[0] ? 'braille-dot--active' : ''}`} />\n        <span className={`braille-dot braille-dot--${size} ${brailleCharacter[4] ? 'braille-dot--active' : ''}`} />\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot braille-dot--${size} ${brailleCharacter[1] ? 'braille-dot--active' : ''}`} />\n        <span className={`braille-dot braille-dot--${size} ${brailleCharacter[5] ? 'braille-dot--active' : ''}`} />\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot braille-dot--${size} ${brailleCharacter[2] ? 'braille-dot--active' : ''}`} />\n        <span className={`braille-dot braille-dot--${size} ${brailleCharacter[6] ? 'braille-dot--active' : ''}`} />\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot braille-dot--${size} ${brailleCharacter[3] ? 'braille-dot--active' : ''}`} />\n        <span className={`braille-dot braille-dot--${size} ${brailleCharacter[7] ? 'braille-dot--active' : ''}`} />\n      </div>\n      {showCharacter && (<div className=\"character-row\">{character}</div>)}\n    </div>\n  );\n};\n\nBrailleCell.defaultProps = {\n  size: 'large',\n};\n\nBrailleCell.propTypes = {\n  character: PropTypes.string.isRequired,\n  brailleCharacter: PropTypes.arrayOf(PropTypes.bool).isRequired,\n  showCharacter: PropTypes.bool.isRequired,\n  size: PropTypes.oneOf(['small', 'large']),\n};\n\nexport default BrailleCell;\n","/**\n * We will use the config to match the actual Braile dots\n * left hand:\n * idx 0 - dot 1\n * idx 1 - dot 2\n * idx 2 - dot 3\n * idx 3 - dot 7\n * right hand\n * idx 4 - dot 4\n * idx 5 - dot 5\n * idx 6 - dot 6\n * idx 7 - dot 8\n */\nconst uncontractedBrailleChars = {\n  a: [true, false, false, false, false, false, false, false],\n  b: [true, true, false, false, false, false, false, false],\n  c: [true, false, false, false, true, false, false, false],\n  d: [true, false, false, false, true, true, false, false],\n  e: [true, false, false, false, false, true, false, false],\n  f: [true, true, false, false, true, false, false, false],\n  g: [true, true, false, false, true, true, false, false],\n  h: [true, true, false, false, false, true, false, false],\n  i: [false, true, false, false, true, false, false, false],\n  j: [false, true, false, false, true, true, false, false],\n  k: [true, false, true, false, false, false, false, false],\n  l: [true, true, true, false, false, false, false, false],\n  m: [true, false, true, false, true, false, false, false],\n  n: [true, false, true, false, true, true, false, false],\n  o: [true, false, true, false, false, true, false, false],\n  p: [true, true, true, false, true, false, false, false],\n  q: [true, true, true, false, true, true, false, false],\n  r: [true, true, true, false, false, true, false, false],\n  s: [false, true, true, false, true, false, false, false],\n  t: [false, true, true, false, true, true, false, false],\n  u: [true, false, true, false, false, false, true, false],\n  v: [true, true, true, false, false, false, true, false],\n  w: [false, true, false, false, true, true, true, false],\n  x: [true, false, true, false, true, false, true, false],\n  y: [true, false, true, false, true, true, true, false],\n  z: [true, false, true, false, false, true, true, false],\n  0: [false, true, false, false, true, true, false, false],\n  1: [true, false, false, false, false, false, false, false],\n  2: [true, true, false, false, false, false, false, false],\n  3: [true, false, false, false, true, false, false, false],\n  4: [true, false, false, false, true, true, false, false],\n  5: [true, false, false, false, false, true, false, false],\n  6: [true, true, false, false, true, false, false, false],\n  7: [true, true, false, false, true, true, false, false],\n  8: [true, true, false, false, false, true, false, false],\n  9: [false, true, false, false, true, false, false, false],\n  ' ': [false, false, false, false, false, false, false, false],\n  '.': [false, true,  false, false, false, true, true, false],\n  ',': [false, true, false, false, false, false, false, false],\n  \"'\": [false, false, true, false, false, false, false, false],\n};\n\nexport const emptyCell = [false, false, false, false, false, false, false, false];\n\nexport default uncontractedBrailleChars;\n","import React from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport BrailleCell from '../BrailleCell';\nimport brailleCharacters from '../../lib/uncontracted-braille-chars';\n\nconst BrailleCharacters = () => {\n  const sortedBrailleCharacters = Object.keys(brailleCharacters)\n    .sort((a, b) => a - b);\n  return (\n    <div className=\"braille-characters-cheatsheet\">\n      { sortedBrailleCharacters.map((brailleCharacter, idx) => (\n        <BrailleCell\n          /* eslint-disable-next-line react/no-array-index-key */\n          key={`braille-cell-cheatsheet-${idx}`}\n          character={brailleCharacter}\n          brailleCharacter={brailleCharacters[brailleCharacter]}\n          showCharacter\n          size=\"small\"\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default BrailleCharacters;\n","import React from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\nimport BrailleCell from '../BrailleCell';\nimport brailleCharacters, { emptyCell } from '../../lib/uncontracted-braille-chars';\n\nconst BrailleCellPage = (props) => {\n  const {\n    numOfCells,\n    showCharacter,\n    words\n  } = props;\n\n  const characters = words.split('');\n  const cells = [];\n\n  for (let i = 0; i < characters.length; i += 1) {\n    cells[i] = characters[i];\n  }\n\n  for (let i = characters.length; i < numOfCells; i += 1) {\n    cells[i] = null;\n  }\n\n  return (\n    <div className=\"braille-cell-page\">\n      { cells.map((character, idx) => (\n        <BrailleCell\n          /* eslint-disable-next-line react/no-array-index-key */\n          key={`braille-cell-${idx}`}\n          character={character}\n          brailleCharacter={character ? brailleCharacters[character] : emptyCell }\n          showCharacter={showCharacter}\n        />\n      ))}\n    </div>\n  );\n};\n\nBrailleCellPage.propTypes = {\n  numOfCells: PropTypes.number.isRequired,\n  showCharacter: PropTypes.bool.isRequired,\n  words: PropTypes.string.isRequired,\n}\n\nexport default BrailleCellPage;\n","import React, { useState } from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\nimport BrailleCellPage from '../BrailleCellPage';\n\nconst BrailleDisplay = (props) => {\n  const {\n    numOfCells,\n    sentence,\n    showCharacter,\n  } = props;\n\n  const [page, setPage] = useState(0);\n\n  const generatePages = (text, cellsCount) => {\n    const pages = [];\n    let start = 0;\n\n    do {\n      pages.push(text.substring(start, start + cellsCount));\n      start += numOfCells;\n    } while (start < text.length);\n\n    return pages;\n  };\n\n  const pages = generatePages(sentence, numOfCells);\n\n  return (\n    <div className={`braille-display braille-display--${numOfCells}`}>\n      <button\n        className=\"braille-display__nav braille-display__nav--prev-page\"\n        disabled={page === 0}\n        aria-label=\"Flip to previous page\"\n        onClick={() => setPage(page - 1)}\n        type=\"button\"\n      />\n      <BrailleCellPage\n        numOfCells={numOfCells}\n        words={pages[page]} \n        showCharacter={showCharacter}\n      />\n      <button\n        className=\"braille-display__nav braille-display__nav--next-page\"\n        disabled={page === pages.length - 1}\n        aria-label=\"Flip to next page\"\n        onClick={() => setPage(page + 1)}\n        type=\"button\"\n      />\n    </div>\n  );\n};\n\nBrailleDisplay.propTypes = {\n  sentence: PropTypes.string.isRequired,\n  numOfCells: PropTypes.number,\n  showCharacter: PropTypes.bool.isRequired,\n};\n\nBrailleDisplay.defaultProps = {\n  numOfCells: 14,\n};\n\nexport default BrailleDisplay;\n","/**\n * Source: https://www.goodreads.com/quotes\n */\nconst quotes = [\n  {\n    author: 'Mahatma Gandhi',\n    quote: 'be the change that you wish to see in the world.',\n  },\n  {\n    author: 'J.K. Rowling',\n    quote: \"if you want to know what a man's like, take a good look at how he treats his inferiors, not his equals.\",\n  },\n  {\n    author: 'Mark Twain',\n    quote: \"if you tell the truth, you don't have to remember anything.\",\n  },\n  {\n    author: 'Eleanor Roosevelt',\n    quote: \"no one can make you feel inferior without your consent.\",\n  },\n  {\n    author: 'Roy T. Bennett',\n    quote: \"Believe in your infinite potential. Your only limitations are those you set upon yourself.\",\n  }\n];\n\nexport default () => {\n  const allQuotes = [...quotes];\n  allQuotes.sort((quoteA, quoteB) => {\n    const a = quoteA.author.toUpperCase();\n    const b = quoteB.author.toUpperCase();\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n\n  return allQuotes.map(({ author, quote }, idx) => ({\n    id: `quote-${idx}`,\n    author,\n    quote,\n  }));\n};\n","/* eslint-disable jsx-a11y/no-onchange */\nimport React, { useState, useEffect } from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\nimport getQuotes from '../../lib/quotes';\n\nconst QuotesSelector = (props) => {\n  const {\n    setSelectedText\n  } = props;\n\n  const allQuotes = getQuotes();\n\n  const [text, setText] = useState(allQuotes[0].quote);\n\n  const onAuthorChosen = (evt) => {\n    const {\n      target: {\n        value\n      }\n    } = evt;\n    setText(value);\n  };\n\n  useEffect(() => {\n    setSelectedText(text);\n  }, [setSelectedText, text]);\n\n  return (\n    <section className=\"preference preference__quotes\">\n      <span>Quotes By: </span>\n      <select\n        aria-label=\"Select author of quote\"\n        defaultValue={allQuotes[0].quote}\n        onChange={onAuthorChosen}\n      >\n        {allQuotes.map(({ id, author, quote}) => (\n          <option key={id} value={quote}>{author}</option>\n        ))}\n      </select>\n    </section>\n  );\n};\n\nQuotesSelector.propTypes = {\n  setSelectedText: PropTypes.func.isRequired,\n};\n\nexport default QuotesSelector;\n","/* eslint-disable jsx-a11y/no-onchange */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useEffect } from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\nimport QuotesSelector from '../QuotesSelector';\n\nconst BrailleDisplayCellPreference = (props) => {\n  const {\n    setNumOfActiveCells,\n    setShowCharacter,\n    showCharacter,\n    setSelectedText,\n    showBrailleCheatsheet,\n    setShowBrailleCheatsheet,\n  } = props;\n\n  const [showCharacterChecked, setShowCharacterChecked] = useState(showCharacter);\n  const [showBrailleCheatSheetChecked, setShowBrailleCheatSheetChecked] = useState(showBrailleCheatsheet);\n\n  const updateNumOfCells = (evt) => {\n    const { target: { value } } = evt;\n    setNumOfActiveCells(parseInt(value, 10) || 14);\n  };\n\n  const onShowCharacterChecked = () => {\n    setShowCharacterChecked(!showCharacterChecked);\n  };\n\n  const onShowCharacterCheatSheetChecked = () => {\n    setShowBrailleCheatSheetChecked(!showBrailleCheatSheetChecked);\n  }\n\n  useEffect(() => {\n    setShowCharacter(showCharacterChecked);\n  }, [setShowCharacter, showCharacterChecked]);\n\n  useEffect(() => {\n    setShowBrailleCheatsheet(showBrailleCheatSheetChecked);\n  }, [setShowBrailleCheatsheet, showBrailleCheatSheetChecked]);\n\n  return (\n    <section className=\"braille-display-preferences\">\n      <h2>Update your preferences:</h2>\n      <section className=\"preference preference__num-of-cells\">\n        <span>Number of cells: </span>\n        <select\n          aria-label=\"Select number of cells\"\n          defaultValue={14}\n          onChange={updateNumOfCells}\n        >\n          <option value=\"14\">14 cells</option>\n          <option value=\"20\">20 cells</option>\n          <option value=\"40\">40 cells</option>\n        </select>\n      </section>\n      <QuotesSelector\n        setSelectedText={setSelectedText}\n      />\n      <div className=\"preference preference__show-characters\">\n        <input\n          type=\"checkbox\"\n          id=\"showCharsCheckbox\"\n          checked={showCharacterChecked}\n          onChange={onShowCharacterChecked}\n        />\n        <label htmlFor=\"showCharsCheckbox\">Show characters</label>\n      </div>\n      <div className=\"preference preference__show-characters\">\n        <input\n          type=\"checkbox\"\n          id=\"showCheatSheetCheckbox\"\n          checked={showBrailleCheatSheetChecked}\n          onChange={onShowCharacterCheatSheetChecked}\n        />\n        <label htmlFor=\"showCheatSheetCheckbox\">Show Braille CheatSheet</label>\n      </div>\n    </section>\n  );\n};\n\nBrailleDisplayCellPreference.propTypes = {\n  setNumOfActiveCells: PropTypes.func.isRequired,\n  setShowCharacter: PropTypes.func.isRequired,\n  showCharacter: PropTypes.bool.isRequired,\n  setSelectedText: PropTypes.func.isRequired,\n  showBrailleCheatsheet: PropTypes.bool.isRequired,\n  setShowBrailleCheatsheet: PropTypes.func.isRequired,\n};\n\nexport default BrailleDisplayCellPreference;\n","import React, { useState } from 'react';\nimport BrailleCharactersCheatSheet from '../BrailleCharactersCheatSheet';\nimport BrailleDisplay from '../BrailleDisplay';\nimport BrailleDisplayPreferences from '../BrailleDisplayPreferences';\n\nconst BrailleDisplaySimulator = () => {\n  const [numOfActiveCells, setNumOfActiveCells] = useState(14);\n  const [showCharacter, setShowCharacter] = useState(false);\n  const [selectedText, setSelectedText] = useState('');\n  const [showBrailleCheatsheet, setShowBrailleCheatsheet] = useState(true);\n\n  return (\n    <div className=\"braille-display-simulator\">\n      <h1>Refreshable Braille Display Simulator</h1>\n      <BrailleDisplay \n        numOfCells={numOfActiveCells}\n        sentence={selectedText.toLowerCase()}\n        showCharacter={showCharacter}\n      />\n      <div className=\"braille-display-simulator__options-panel\">\n        <BrailleDisplayPreferences\n          setNumOfActiveCells={setNumOfActiveCells}\n          setShowCharacter={setShowCharacter}\n          showCharacter={showCharacter}\n          setSelectedText={setSelectedText}\n          showBrailleCheatsheet={showBrailleCheatsheet}\n          setShowBrailleCheatsheet={setShowBrailleCheatsheet}\n        />\n        {showBrailleCheatsheet && <BrailleCharactersCheatSheet />}\n      </div>\n    </div>\n  );\n}\n\nexport default BrailleDisplaySimulator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport BrailleDisplaySimulator from './components/BrailleDisplaySimulator';\nimport './index.css';\n\nReactDOM.render(<BrailleDisplaySimulator />, document.getElementById('root'));\n"],"sourceRoot":""}