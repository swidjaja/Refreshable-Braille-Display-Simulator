{"version":3,"sources":["components/BrailleCell/BrailleCell.jsx","lib/uncontracted-braille-chars.js","components/BrailleCellPage/BrailleCellPage.jsx","components/BrailleDisplay/BrailleDisplay.jsx","lib/quotes.js","components/QuotesSelector/QuotesSelector.jsx","components/BrailleDisplayPreferences/BrailleDisplayPreferences.jsx","components/BrailleDisplaySimulator/BrailleDisplaySimulator.jsx","index.js"],"names":["BrailleCell","props","character","brailleCharacter","showCharacter","className","uncontractedBrailleChars","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","BrailleCellPage","words","split","map","idx","key","brailleCharacters","BrailleDisplay","numOfCells","sentence","useState","page","setPage","pages","text","cellsCount","start","push","substring","length","generatePages","disabled","aria-label","onClick","type","defaultProps","quotes","author","quote","QuotesSelector","setSelectedText","allQuotes","sort","quoteA","quoteB","toUpperCase","id","getQuotes","setText","useEffect","defaultValue","onChange","evt","value","target","BrailleDisplayCellPreference","setNumOfActiveCells","setShowCharacter","showCharacterChecked","setShowCharacterChecked","parseInt","checked","htmlFor","BrailleDisplaySimulator","numOfActiveCells","selectedText","toLowerCase","ReactDOM","render","document","getElementById"],"mappings":"0WAwCeA,G,kBApCK,SAACC,GAAW,IAE5BC,EAGED,EAHFC,UACAC,EAEEF,EAFFE,iBACAC,EACEH,EADFG,cAGF,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,eACb,0BAAMA,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,MAC9E,0BAAME,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,OAEhF,yBAAKE,UAAU,eACb,0BAAMA,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,MAC9E,0BAAME,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,OAEhF,yBAAKE,UAAU,eACb,0BAAMA,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,MAC9E,0BAAME,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,OAEhF,yBAAKE,UAAU,eACb,0BAAMA,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,MAC9E,0BAAME,UAAS,sBAAiBF,EAAiB,GAAK,sBAAwB,OAE/EC,GAAkB,yBAAKC,UAAU,iBAAiBH,MCe1CI,EA5CkB,CAC/BC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACpDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAM,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAM,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAM,GAAM,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAM,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAO,GAAM,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAO,GAAO,GAChDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAM,GAAM,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAO,GAAM,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAM,GAAM,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAM,GAAM,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAM,GAAO,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAM,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAM,GAAM,GAAM,GAAO,GAChDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAM,GAAM,GAAM,GAAO,GACjDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACpDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAO,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAO,GAAO,GAAM,GAAO,GAAO,GAAO,GACnDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAM,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GACjDC,EAAG,EAAC,GAAM,GAAO,GAAM,GAAM,GAAO,GAAO,GAAO,GAClDC,EAAG,EAAC,GAAO,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GACnD,IAAK,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACvD,IAAK,EAAC,GAAO,GAAQ,GAAM,GAAM,GAAO,GAAM,GAAO,GACrD,IAAK,EAAC,GAAO,GAAO,GAAM,GAAO,GAAO,GAAO,GAAO,GACtD,IAAK,EAAC,GAAO,GAAM,GAAO,GAAM,GAAM,GAAM,GAAO,GACnD,IAAK,EAAC,GAAO,GAAO,GAAO,GAAO,GAAM,GAAO,GAAO,ICTzCC,EA1BS,SAAC1C,GAAW,IAEhCG,EAEEH,EAFFG,cACAwC,EACE3C,EADF2C,MAGF,OACE,yBAAKvC,UAAU,qBACXuC,EAAMC,MAAM,IAAIC,KAAI,SAAC5C,EAAW6C,GAAZ,OACpB,kBAAC,EAAD,CAEEC,IAAKD,EACL7C,UAAWA,EACXC,iBAAkB8C,EAAkB/C,GACpCE,cAAeA,SCfnB8C,EAAiB,SAACjD,GAAW,IAE/BkD,EAGElD,EAHFkD,WACAC,EAEEnD,EAFFmD,SACAhD,EACEH,EADFG,cAJ8B,EAORiD,mBAAS,GAPD,mBAOzBC,EAPyB,KAOnBC,EAPmB,KAqB1BC,EAZgB,SAACC,EAAMC,GAC3B,IAAMF,EAAQ,GACVG,EAAQ,EAEZ,GACEH,EAAMI,KAAKH,EAAKI,UAAUF,EAAOA,EAAQD,IACzCC,GAASR,QACFQ,EAAQF,EAAKK,QAEtB,OAAON,EAGKO,CAAcX,EAAUD,GAEtC,OACE,yBAAK9C,UAAS,2CAAsC8C,IAClD,4BACE9C,UAAU,uDACV2D,SAAmB,IAATV,EACVW,aAAW,wBACXC,QAAS,kBAAMX,EAAQD,EAAO,IAC9Ba,KAAK,WAEP,kBAAC,EAAD,CACEvB,MAAOY,EAAMF,GACblD,cAAeA,IAEjB,4BACEC,UAAU,uDACV2D,SAAUV,IAASE,EAAMM,OAAS,EAClCG,aAAW,oBACXC,QAAS,kBAAMX,EAAQD,EAAO,IAC9Ba,KAAK,aAYbjB,EAAekB,aAAe,CAC5BjB,WAAY,IAGCD,QC3DTmB,G,YAAS,CACb,CACEC,OAAQ,iBACRC,MAAO,oDAET,CACED,OAAQ,eACRC,MAAO,2GAET,CACED,OAAQ,aACRC,MAAO,+DAET,CACED,OAAQ,oBACRC,MAAO,2DAET,CACED,OAAQ,iBACRC,MAAO,gGC0BIC,EA1CQ,SAACvE,GAAW,IAE/BwE,EACExE,EADFwE,gBAGIC,EDeO,WACb,IAAMA,EAAS,UAAOL,GAatB,OAZAK,EAAUC,MAAK,SAACC,EAAQC,GACtB,IAAMtE,EAAIqE,EAAON,OAAOQ,cAClBtE,EAAIqE,EAAOP,OAAOQ,cACxB,OAAIvE,EAAIC,EACC,EAELD,EAAIC,GACE,EAEH,KAGFkE,EAAU5B,KAAI,WAAoBC,GAApB,IAAGuB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAX,MAA6B,CAChDQ,GAAG,SAAD,OAAWhC,GACbuB,SACAC,YChCgBS,GALc,EAOR3B,mBAASqB,EAAU,GAAGH,OAPd,mBAOzBd,EAPyB,KAOnBwB,EAPmB,KAsBhC,OAJAC,qBAAU,WACRT,EAAgBhB,KACf,CAACgB,EAAiBhB,IAGnB,6BAASpD,UAAU,iCACjB,0CACA,4BACE4D,aAAW,yBACXkB,aAAcT,EAAU,GAAGH,MAC3Ba,SAnBiB,SAACC,GAAS,IAG3BC,EAEAD,EAHFE,OACED,MAGJL,EAAQK,KAeHZ,EAAU5B,KAAI,gBAAGiC,EAAH,EAAGA,GAAIT,EAAP,EAAOA,OAAQC,EAAf,EAAeA,MAAf,OACb,4BAAQvB,IAAK+B,EAAIO,MAAOf,GAAQD,SC6B3BkB,EA3DsB,SAACvF,GAAW,IAE7CwF,EAGExF,EAHFwF,oBACAC,EAEEzF,EAFFyF,iBACAjB,EACExE,EADFwE,gBAJ4C,EAOUpB,oBAAS,GAPnB,mBAOvCsC,EAPuC,KAOjBC,EAPiB,KAsB9C,OAJAV,qBAAU,WACRQ,EAAiBC,KAChB,CAACD,EAAkBC,IAGpB,6BAAStF,UAAU,+BACjB,wDACA,6BAASA,UAAU,uCACjB,iDACA,4BACE4D,aAAW,yBACXkB,aAAc,GACdC,SArBiB,SAACC,GAAS,IACfC,EAAYD,EAAtBE,OAAUD,MAClBG,EAAoBI,SAASP,EAAO,KAAO,MAqBrC,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,cAGJ,kBAAC,EAAD,CACEb,gBAAiBA,IAEnB,yBAAKpE,UAAU,0CACb,2BACE8D,KAAK,WACLY,GAAG,oBACHe,QAASH,EACTP,SA/BuB,WAC7BQ,GAAyBD,MAgCrB,2BAAOI,QAAQ,qBAAf,sBC5BOC,EAtBiB,WAAO,IAAD,EACY3C,mBAAS,IADrB,mBAC7B4C,EAD6B,KACXR,EADW,OAEMpC,oBAAS,GAFf,mBAE7BjD,EAF6B,KAEdsF,EAFc,OAGIrC,mBAAS,IAHb,mBAG7B6C,EAH6B,KAGfzB,EAHe,KAKpC,OACE,yBAAKpE,UAAU,6BACb,qEACA,kBAAC,EAAD,CACE8C,WAAY8C,EACZ7C,SAAU8C,EAAaC,cACvB/F,cAAeA,IAEjB,kBAAC,EAAD,CACEqF,oBAAqBA,EACrBC,iBAAkBA,EAClBjB,gBAAiBA,M,MCfzB2B,IAASC,OAAO,kBAAC,EAAD,MAA6BC,SAASC,eAAe,W","file":"static/js/main.3eb922c8.chunk.js","sourcesContent":["import React from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\n\nconst BrailleCell = (props) => {\n  const { \n    character,\n    brailleCharacter,\n    showCharacter,\n  } = props;\n\n  return (\n    <div className=\"braille-cell\">\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacter[0] ? 'braille-dot--active' : ''}`} />\n        <span className={`braille-dot ${brailleCharacter[1] ? 'braille-dot--active' : ''}`} />\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacter[2] ? 'braille-dot--active' : ''}`} />\n        <span className={`braille-dot ${brailleCharacter[3] ? 'braille-dot--active' : ''}`} />\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacter[4] ? 'braille-dot--active' : ''}`} />\n        <span className={`braille-dot ${brailleCharacter[5] ? 'braille-dot--active' : ''}`} />\n      </div>\n      <div className=\"braille-row\">\n        <span className={`braille-dot ${brailleCharacter[6] ? 'braille-dot--active' : ''}`} />\n        <span className={`braille-dot ${brailleCharacter[7] ? 'braille-dot--active' : ''}`} />\n      </div>\n      {showCharacter && (<div className=\"character-row\">{character}</div>)}\n    </div>\n  );\n};\n\nBrailleCell.propTypes = {\n  character: PropTypes.string.isRequired,\n  brailleCharacter: PropTypes.arrayOf(PropTypes.bool).isRequired,\n  showCharacter: PropTypes.bool.isRequired,\n};\n\nexport default BrailleCell;\n","const uncontractedBrailleChars = {\n  a: [true, false, false, false, false, false, false, false],\n  b: [true, false, true, false, false, false, false, false],\n  c: [true, true, false, false, false, false, false, false],\n  d: [true, true, false, true, false, false, false, false],\n  e: [true, false, false, true, false, false, false, false],\n  f: [true, true, true, false, false, false, false, false],\n  g: [true, true, true, true, false, false, false, false],\n  h: [true, false, true, true, false, false, false, false],\n  i: [false, true, true, false, false, false, false, false],\n  j: [false, true, true, true, false, false, false, false],\n  k: [true, false, false, false, true, false, false, false],\n  l: [true, false, true, false, true, false, false, false],\n  m: [true, true, false, false, true, false, false, false],\n  n: [true, true, false, true, true, false, false, false],\n  o: [true, false, false, true, true, false, false, false],\n  p: [true, true, true, false, true, false, false, false],\n  q: [true, true, true, true, true, false, false, false],\n  r: [true, false, true, true, true, false, false, false],\n  s: [false, true, true, false, true, false, false, false],\n  t: [false, true, true, true, true, false, false, false],\n  u: [true, false, false, false, true, true, false, false],\n  v: [true, false, true, false, true, true, false, false],\n  w: [false, true, true, true, false, true, false, false],\n  x: [true, true, false, false, true, true, false, false],\n  y: [true, true, false, true, true, true, false, false],\n  z: [true, false, false, true, true, true, false, false],\n  0: [false, true, true, true, false, false, false, false],\n  1: [true, false, false, false, false, false, false, false],\n  2: [true, false, true, false, false, false, false, false],\n  3: [true, true, false, false, false, false, false, false],\n  4: [true, true, false, true, false, false, false, false],\n  5: [true, false, false, true, false, false, false, false],\n  6: [true, true, true, false, false, false, false, false],\n  7: [true, true, true, true, false, false, false, false],\n  8: [true, false, true, true, false, false, false, false],\n  9: [false, true, true, false, false, false, false, false],\n  ' ': [false, false, false, false, false, false, false, false],\n  '.': [false, false,  true, true, false, true, false, false],\n  ',': [false, false, true, false, false, false, false, false],\n  '#': [false, true, false, true, true, true, false, false],\n  \"'\": [false, false, false, false, true, false, false, false],\n}\n\nexport default uncontractedBrailleChars;\n","import React from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\nimport BrailleCell from '../BrailleCell';\nimport brailleCharacters from '../../lib/uncontracted-braille-chars';\n\nconst BrailleCellPage = (props) => {\n  const {\n    showCharacter,\n    words\n  } = props;\n\n  return (\n    <div className=\"braille-cell-page\">\n      { words.split('').map((character, idx) => (\n        <BrailleCell\n          /* eslint-disable-next-line react/no-array-index-key */\n          key={idx}\n          character={character}\n          brailleCharacter={brailleCharacters[character]}\n          showCharacter={showCharacter}\n        />\n      ))}\n    </div>\n  );\n};\n\nBrailleCellPage.propTypes = {\n  showCharacter: PropTypes.bool.isRequired,\n  words: PropTypes.string.isRequired,\n}\n\nexport default BrailleCellPage;\n","import React, { useState } from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\nimport BrailleCellPage from '../BrailleCellPage';\n\nconst BrailleDisplay = (props) => {\n  const {\n    numOfCells,\n    sentence,\n    showCharacter,\n  } = props;\n\n  const [page, setPage] = useState(0);\n\n  const generatePages = (text, cellsCount) => {\n    const pages = [];\n    let start = 0;\n\n    do {\n      pages.push(text.substring(start, start + cellsCount));\n      start += numOfCells;\n    } while (start < text.length);\n\n    return pages;\n  };\n\n  const pages = generatePages(sentence, numOfCells);\n\n  return (\n    <div className={`braille-display braille-display--${numOfCells}`}>\n      <button\n        className=\"braille-display__nav braille-display__nav--prev-page\"\n        disabled={page === 0}\n        aria-label=\"Flip to previous page\"\n        onClick={() => setPage(page - 1)}\n        type=\"button\"\n      />\n      <BrailleCellPage\n        words={pages[page]} \n        showCharacter={showCharacter}\n      />\n      <button\n        className=\"braille-display__nav braille-display__nav--next-page\"\n        disabled={page === pages.length - 1}\n        aria-label=\"Flip to next page\"\n        onClick={() => setPage(page + 1)}\n        type=\"button\"\n      />\n    </div>\n  );\n};\n\nBrailleDisplay.propTypes = {\n  sentence: PropTypes.string.isRequired,\n  numOfCells: PropTypes.number,\n  showCharacter: PropTypes.bool.isRequired,\n};\n\nBrailleDisplay.defaultProps = {\n  numOfCells: 14,\n};\n\nexport default BrailleDisplay;\n","/**\n * Source: https://www.goodreads.com/quotes\n */\nconst quotes = [\n  {\n    author: 'Mahatma Gandhi',\n    quote: 'Be the change that you wish to see in the world.',\n  },\n  {\n    author: 'J.K. Rowling',\n    quote: \"If you want to know what a man's like, take a good look at how he treats his inferiors, not his equals.\",\n  },\n  {\n    author: 'Mark Twain',\n    quote: \"If you tell the truth, you don't have to remember anything.\",\n  },\n  {\n    author: 'Eleanor Roosevelt',\n    quote: \"No one can make you feel inferior without your consent.\",\n  },\n  {\n    author: 'Roy T. Bennett',\n    quote: \"Believe in your infinite potential. Your only limitations are those you set upon yourself.\",\n  }\n];\n\nexport default () => {\n  const allQuotes = [...quotes];\n  allQuotes.sort((quoteA, quoteB) => {\n    const a = quoteA.author.toUpperCase();\n    const b = quoteB.author.toUpperCase();\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n\n  return allQuotes.map(({ author, quote }, idx) => ({\n    id: `quote-${idx}`,\n    author,\n    quote,\n  }));\n};\n","/* eslint-disable jsx-a11y/no-onchange */\nimport React, { useState, useEffect } from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\nimport getQuotes from '../../lib/quotes';\n\nconst QuotesSelector = (props) => {\n  const {\n    setSelectedText\n  } = props;\n\n  const allQuotes = getQuotes();\n\n  const [text, setText] = useState(allQuotes[0].quote);\n\n  const onAuthorChosen = (evt) => {\n    const {\n      target: {\n        value\n      }\n    } = evt;\n    setText(value);\n  };\n\n  useEffect(() => {\n    setSelectedText(text);\n  }, [setSelectedText, text]);\n\n  return (\n    <section className=\"preference preference__quotes\">\n      <h3>Quotes By:</h3>\n      <select\n        aria-label=\"Select author of quote\"\n        defaultValue={allQuotes[0].quote}\n        onChange={onAuthorChosen}\n      >\n        {allQuotes.map(({ id, author, quote}) => (\n          <option key={id} value={quote}>{author}</option>\n        ))}\n      </select>\n    </section>\n  );\n};\n\nQuotesSelector.propTypes = {\n  setSelectedText: PropTypes.func.isRequired,\n};\n\nexport default QuotesSelector;\n","/* eslint-disable jsx-a11y/no-onchange */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useEffect } from 'react';\n/* eslint-disable-next-line import/no-extraneous-dependencies */\nimport PropTypes from 'prop-types';\nimport QuotesSelector from '../QuotesSelector';\n\nconst BrailleDisplayCellPreference = (props) => {\n  const {\n    setNumOfActiveCells,\n    setShowCharacter,\n    setSelectedText,\n  } = props;\n\n  const [showCharacterChecked, setShowCharacterChecked] = useState(false);\n\n  const updateNumOfCells = (evt) => {\n    const { target: { value } } = evt;\n    setNumOfActiveCells(parseInt(value, 10) || 14);\n  };\n\n  const onShowCharacterChecked = () => {\n    setShowCharacterChecked(!showCharacterChecked);\n  };\n\n  useEffect(() => {\n    setShowCharacter(showCharacterChecked);\n  }, [setShowCharacter, showCharacterChecked]);\n\n  return (\n    <section className=\"braille-display-preferences\">\n      <h2>Update your preferences:</h2>\n      <section className=\"preference preference__num-of-cells\">\n        <h3>Number of cells: </h3>\n        <select\n          aria-label=\"Select number of cells\"\n          defaultValue={14}\n          onChange={updateNumOfCells}\n        >\n          <option value=\"14\">14 cells</option>\n          <option value=\"20\">20 cells</option>\n          <option value=\"40\">40 cells</option>\n        </select>\n      </section>\n      <QuotesSelector\n        setSelectedText={setSelectedText}\n      />\n      <div className=\"preference preference__show-characters\">\n        <input\n          type=\"checkbox\"\n          id=\"showCharsCheckbox\"\n          checked={showCharacterChecked}\n          onChange={onShowCharacterChecked}\n        />\n        <label htmlFor=\"showCharsCheckbox\">Show characters</label>\n      </div>\n    </section>\n  );\n};\n\nBrailleDisplayCellPreference.propTypes = {\n  setNumOfActiveCells: PropTypes.func.isRequired,\n  setShowCharacter: PropTypes.func.isRequired,\n  setSelectedText: PropTypes.func.isRequired,\n};\n\nexport default BrailleDisplayCellPreference;\n","import React, { useState } from 'react';\nimport BrailleDisplay from '../BrailleDisplay';\nimport BrailleDisplayPreferences from '../BrailleDisplayPreferences';\n\nconst BrailleDisplaySimulator = () => {\n  const [numOfActiveCells, setNumOfActiveCells] = useState(14);\n  const [showCharacter, setShowCharacter] = useState(false);\n  const [selectedText, setSelectedText] = useState('');\n\n  return (\n    <div className=\"braille-display-simulator\">\n      <h1>Refreshable Braille Display Simulator</h1>\n      <BrailleDisplay \n        numOfCells={numOfActiveCells}\n        sentence={selectedText.toLowerCase()}\n        showCharacter={showCharacter}\n      />\n      <BrailleDisplayPreferences\n        setNumOfActiveCells={setNumOfActiveCells}\n        setShowCharacter={setShowCharacter}\n        setSelectedText={setSelectedText}\n      />\n    </div>\n  );\n}\n\nexport default BrailleDisplaySimulator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport BrailleDisplaySimulator from './components/BrailleDisplaySimulator';\nimport './index.css';\n\nReactDOM.render(<BrailleDisplaySimulator />, document.getElementById('root'));\n"],"sourceRoot":""}